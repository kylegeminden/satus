// *** TABLE OF CONTENTS ***

// $TYPOGRAPHY
// $BORDERS
// $SHADOWS
// $TRANSFORMS
// $TRANSISTION
// $BACKGROUND
// $GRADIENTS
// $HELPERS

// ==========================================================================
//  $TYPOGRAPHY
// ==========================================================================

// Requires inline-block or block for proper styling

.text-truncate() {
         overflow  : hidden;
         max-width : 100%;
    text-overflow  : ellipsis;
      white-space  : nowrap;
      word-wrap    : normal;
}

.text-break() {
    word-break : break-all;
    word-break : break-word;
     word-wrap : break-word;
}

// http://blog.kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/
.hyphens() {
     -ms-word-break : break-all;
         word-break : break-all;
    // Non standard for webkit
         word-break : break-word;
    -webkit-hyphens : auto;
       -moz-hyphens : auto;
            hyphens : auto;
}

// .resize(VALUE); (both, horizontal, vertical)
// resize does not apply to blocks for which the overflow property is set to visible.

.resize(@direction: both) {
    overflow : auto;
      resize : @direction;
}

// .columns(auto, 2, 40px, #eee, solid, 1px)

.columns(@colWidth: auto; @colCount: 2; @colGap: 40px; @columnRuleColor: #eee; @columnRuleStyle: solid; @columnRuleWidth: 0px) {
         -webkit-column-width : @colWidth;
         -webkit-column-count : @colCount;
           -webkit-column-gap : @colGap;
    -webkit-column-rule-color : @columnRuleColor;
    -webkit-column-rule-style : @columnRuleStyle;
    -webkit-column-rule-width : @columnRuleWidth;
            -moz-column-width : @colWidth;
            -moz-column-count : @colCount;
              -moz-column-gap : @colGap;
       -moz-column-rule-color : @columnRuleColor;
       -moz-column-rule-style : @columnRuleStyle;
       -moz-column-rule-width : @columnRuleWidth;
                 column-width : @colWidth;
                 column-count : @colCount;
                   column-gap : @colGap;
            column-rule-color : @columnRuleColor;
            column-rule-style : @columnRuleStyle;
            column-rule-width : @columnRuleWidth;
}

// ==========================================================================
//  $FORMS
// ==========================================================================

// http://css-tricks.com/almanac/selectors/p/placeholder/
.placeholder(@color: @placeholder-color) {
    // Safari and Chrome
    &::-webkit-input-placeholder {
        color: @color;
    }
    // Firefox 19+
    &::-moz-placeholder {
        color: @color;
    }
    // Intenet Expolorer 10+
    &:-ms-input-placeholder {
        color: @color;
    }
    // Firefox 18-
    &:-moz-placeholder {
        color: @color;
    }
}

.tab-focus() {
    &:focus {
        // Default
        outline: 1px dashed #96C0E6;
        // // Webkit
        // outline: 5px auto -webkit-focus-ring-color;
        outline-offset: -2px;
    }
}


// ==========================================================================
//  $BORDERS
// ==========================================================================

// .bordered(1px, solid, #bbb);

.bordered(@width: 1px; @style: solid; @color: @lightGrey) {
    border-width : @width;
    border-style : @style;
    border-color : @color;
}


// won't output css if it is 0
// .border-radius(.3rem);
.border-radius(@radius) when (@radius > 0) {
    border-radius: @radius;
}

// ==========================================================================
//  $SHADOWS
// ==========================================================================

// Multiple shadow solution from
// http://toekneestuck.com/blog/2012/05/15/less-css-arguments-variable/

.box-shadow(@shadowA; @shadowB:X; ...){
    @props: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-box-shadow: @props; // iOS <4.3 & Android <4.1
            box-shadow: @props;
}

// ==========================================================================
//  $TRANSFORMS
// ==========================================================================

// .rotate(VALUEdeg);

.rotate(@deg) {
    -webkit-transform : rotate(@deg);
       -moz-transform : rotate(@deg);
        -ms-transform : rotate(@deg);
         -o-transform : rotate(@deg);
            transform : rotate(@deg);
}

// .scale(VALUE);

.scale(@ratio) {
    -webkit-transform : scale(@ratio);
       -moz-transform : scale(@ratio);
        -ms-transform : scale(@ratio);
         -o-transform : scale(@ratio);
            transform : scale(@ratio);
}

// .skew(VALUE, VALUE);

.skew(@x; @y;) {
    -webkit-transform : skew(@x, @y);
       -moz-transform : skew(@x, @y);
        -ms-transform : skew(@x, @y);
         -o-transform : skew(@x, @y);
            transform : skew(@x, @y);
}

// .translate(VALUE, VALUE)

.translate(@x; @y;) {
    -webkit-transform : translate(@x, @y);
       -moz-transform : translate(@x, @y);
        -ms-transform : translate(@x, @y);
         -o-transform : translate(@x, @y);
            transform : translate(@x, @y);
}

// .translate(VALUE, VALUE, VALUE)

.translate3d(@x; @y; @z) {
    -webkit-transform : translate(@x, @y, @z);
       -moz-transform : translate(@x, @y, @z);
        -ms-transform : translate(@x, @y, @z);
         -o-transform : translate(@x, @y, @z);
            transform : translate(@x, @y, @z);
}

// ==========================================================================
//  $TRANSISTION
// ==========================================================================

// .transition(PROPERTY DURATION DELAY(OPTIONAL) TIMING-FINCTION);

.transition(@transition) {
    -webkit-transition : @transition;
       -moz-transition : @transition;
         -o-transition : @transition;
            transition : @transition;
}

// ==========================================================================
//  $BACKGROUND
// ==========================================================================

// http://css-tricks.com/almanac/properties/b/backface-visibility/
// default is visibile
// .backface-visibility(VALUE); (hidden or visible)

.backface-visibility(@visibility) {
    -webkit-backface-visibility : @visibility;
       -moz-backface-visibility : @visibility;
            backface-visibility : @visibility;
}

// .background-size(VALUE(s)); (width and or height, or keyword)

.background-size(@size) {
    -webkit-background-size : @size;
       -moz-background-size : @size;
         -o-background-size : @size;
            background-size : @size;
}

// .background-clip(VALUE); (border-box, padding-box, content-box)

.background-clip(@clip) {
    -webkit-background-clip : @clip;
       -moz-background-clip : @clip;
            background-clip : @clip;
}

// .box-sizing(VALUE); (border-box, padding-box, content-box)

.box-sizing(@boxsize: border-box) {
    -webkit-box-sizing : @boxsize;
       -moz-box-sizing : @boxsize;
            box-sizing : @boxsize;
}

// Opacity

.opacity(@opacity) {
    opacity: @opacity;
    // IE8 filter
    @opacity-ie: (@opacity * 100);
    filter: ~"alpha(opacity=@{opacity-ie})";
}

// ==========================================================================
//  $GRADIENTS
// ==========================================================================

// * @color-stops were designed to be escaped in order to allow for multiples.
// * fallbacks can be either an image or a color or both.

// .linear-gradident(#ccc, 0deg, ~"#ccc 0%, #fff 100%");

.linear-gradient(@fallback; @angle; @color-stops) {
    background: @fallback;
    background: -webkit-linear-gradient((90 - @angle), @color-stops); // Chrome 10-25, iOS 5+, Safari 5.1+
    background: -moz-linear-gradient((90 - @angle), @color-stops); // Firefox 3.6-15
    background: linear-gradient(@angle, @color-stops); // Chrome 26, Firefox 16+, IE 10+, Opera 12.10+
}

// .radial-gradient(white, 25% 25%, ellipse, ~"white 0%, black 50%");

.radial-gradient(@fallback; @position; @shape; @stops) {
    background: @fallback;
    background: -webkit-radial-gradient(@position, @shape cover,  @stops); /* Chrome10+,Safari5.1+ */
    background: -moz-radial-gradient(@position, @shape cover,  @stops); /* FF3.6+ */
    background: radial-gradient(@shape at @position,  @stops); /* W3C */
}

// ==========================================================================
//  $SHAPES
// ==========================================================================

// http://css-tricks.com/examples/ShapesOfCSS/

#triangle {

    // #triangle > .up(10px, 20px, #ccc)

    .up(@width: 10px; @height: 20px; @color: @k40) {
                width: 0;
               height: 0;
          border-left: @width solid transparent;
         border-right: @width solid transparent;
        border-bottom: @height solid @color;
    }

    .down(@width: 10px; @height: 20px; @color: @k40) {
               width: 0;
              height: 0;
         border-left: @width solid transparent;
        border-right: @width solid transparent;
          border-top: @height solid @color;
    }

    .left(@width: 20px; @height: 10px; @color: @k40) {
                width: 0;
               height: 0;
           border-top: @height solid transparent;
         border-right: @width solid @color;
        border-bottom: @height solid transparent;
    }

    .right(@width: 20px; @height: 10px; @color: @k40) {
        width: 0;
        height: 0;
        border-top: @height solid transparent;
        border-left: @width solid @color;
        border-bottom: @height solid transparent;
    }

    .top-left(@width: 20px; @height: 20px; @color: @k40) {
        width: 0;
        height: 0;
        border-top: @height solid @color;
        border-right: @width solid transparent;
    }

    .top-right(@width: 20px; @height: 20px; @color: @k40) {
        width: 0;
        height: 0;
        border-top: @height solid @color;
        border-left: @width solid transparent;
    }

    .bottom-left(@width: 20px; @height: 20px; @color: @k40) {
        width: 0;
        height: 0;
        border-bottom: @height solid @color;
        border-right: @width solid transparent;
    }

    .bottom-right(@width: 20px; @height: 20px; @color: @k40) {
        width: 0;
        height: 0;
        border-bottom: @height solid @color;
        border-left: @width solid transparent;
    }

}

// ==========================================================================
//  $HELPERS
// ==========================================================================

// Image replacement

.ir() {
    overflow: hidden;
    background-color: transparent;
    border: 0;
    &:before {
        content: "";
        display: block;
        width: 0;
        height: 150%;
    }
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v

.visuallyhidden() {
    overflow: hidden;
    clip: rect(0 0 0 0);
    position: absolute;
    height: 1px;
    width: 1px;
    margin: -1px;
    padding: 0;
    border: 0;
}

// Extends the .visuallyhidden class to allow the element to be focusable when navigated to via
// the keyboard: h5bp.com/p
// Add mixin to :active and :focus pseudo classes

.visuallyhidden-focusable() {
    overflow: visible;
    clip: auto;
    position: static;
    width: auto;
    height: auto;
    margin: 0;
}

// Contain floats: h5bp.com/q
// Clearfix

.clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// ==========================================================================
//  $GRID
// ==========================================================================

.make-row() {
    .clearfix();
    margin-left: ;
}

.make-column(@x; @total-columns) {
    float: left;
    width: (100 / @total-columns) * @column * 1%;
    padding-left: ;
}

.width(@x; @total-columns) {
    width: (100 / @total-columns) * @column * 1%;
}
